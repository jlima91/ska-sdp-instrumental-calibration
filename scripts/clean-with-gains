#!/usr/bin/env bash

#SBATCH --nodes=1
#SBATCH --exclusive
#SBATCH --no-requeue
#SBATCH --job-name=clean-with-gains
#SBATCH --output=slurm-%j-%x.out

export AWS_ENV=false
export DP3_CMD=${DP3_CMD:-"DP3"}
export WSCLEAN_CMD=${WSCLEAN_CMD:-"wsclean"}

export OPENBLAS_NUM_THREADS=1

check-module-load() {
   if [ "${AWS_ENV}" = true ]; then
     module list 2>&1 | grep -wq "ska-sdp-spack"
     if [[ $? -ne 0 ]]; then
       echo "Meta modules not loaded. Exiting"
       exit 1
     fi
   fi
}

help()
{
   # Display Help
   echo "Apply gaintable to measurement set using DP3, and generate fits image using wsclean"
   echo
   echo "Usage: clean-with-gains [-h][-a] -i <input-ms> -g <gaintable.h5parm> <WSCLEAN-PARAMS>"
   echo "options:"
   echo "h     Print this help and exit."
   echo "a     Set flag to run the script in AWS-HPC."
   echo
   echo "If -a flag is set, the script handles the module loads, and ensures DP3 and wsclean are in the execution path."
   echo "The user is required to load the metamodule on AWS-HPC"
   echo "If -a flag is not provided, the script assumes DP3 and wsclean to be in path and are defaulted to 'DP3' and 'wsclean'"
   echo "To use alternative DP3 command, set DP3_CMD=/alternate/path/to/DP3."
   echo "To use alternative wsclean command, set WSCLEAN_CMD=/alternate/path/to/wsclean."
   echo
}

create-fits() {
  if [ "${AWS_ENV}" = true ]; then
      module load --silent wsclean
  fi

  set -o xtrace
  ${WSCLEAN_CMD} $@
  set +o xtrace

  if [ "${AWS_ENV}" = true ]; then
      module unload --silent wsclean
  fi
}

applycal() {
  if [ "${AWS_ENV}" = true ]; then
      module load --silent dp3
  fi

  # Parse arguments
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      --parmdb)
        parmdb="$2"
        shift # Shift past the argument name
        ;;
      --msin)
        msin="$2"
        shift # Shift past the argument name
        ;;
      --msout)
        msout="$2"
        shift # Shift past the argument name
        ;;
      *)
        echo "Unknown option: $1"
        return 1
        ;;
    esac
    shift # Shift past the argument value or unknown option
  done

  echo "Removing previously created ${msout}"
  rm -rf $msout
  set -o xtrace
  ${DP3_CMD} steps="[applycal]" msin=${msin}\
      applycal.type=applycal applycal.parmdb=${parmdb}\
      applycal.updateweights=True\
      applycal.steps="[phase, amplitude]" applycal.phase.correction=phase000\
      applycal.amplitude.correction=amplitude000 msout=${msout}
  set +o xtrace

  if [ "${AWS_ENV}" = true ]; then
      module unload --silent dp3
  fi

}

MSOUT="corrected.ms"

while getopts ":hag:i:" option; do
   case $option in
     h) help
        exit;;
     g) PARMDB=$OPTARG;;
     i) MSIN=$OPTARG;;
     a) AWS_ENV=true;;
     \?) # Invalid option
        break;;

   esac
done
shift $((OPTIND-1))
WSCLEAN_ARGS=$@
: ${PARMDB:?is not set. Use -g <gaintbale.h5parm>}
: ${MSIN:?is not set. Use -i <input-ms.ms>}
: ${WSCLEAN_ARGS:?is not set. Please provide wsclean args}

check-module-load
set -e

echo ""
echo "**************** wsclean without apply ***************"

BEAM_CORRECTED_MS_IN=./beamcor.msin
$DP3_CMD msin=$MSIN steps="[applybeam]" msout=$BEAM_CORRECTED_MS_IN
create-fits ${WSCLEAN_ARGS} -niter 0 -apply-primary-beam -name "original" $BEAM_CORRECTED_MS_IN
rm -rf $BEAM_CORRECTED_MS_IN

echo ""
echo "**************** ApplyCal ***************"
applycal --parmdb $PARMDB --msin $MSIN --msout $MSOUT

echo ""
echo "**************** wsclean with apply ***************"
BEAM_CORRECTED_MS_OUT=./beamcor.msout
$DP3_CMD msin=$MSOUT steps="[applybeam]" msout=$BEAM_CORRECTED_MS_OUT
create-fits ${WSCLEAN_ARGS} -niter 0 -apply-primary-beam -name "corrected" $BEAM_CORRECTED_MS_OUT
rm -rf $BEAM_CORRECTED_MS_OUT
