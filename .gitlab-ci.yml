# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: $SKA_PYTHON_PYTANGO_BUILDER_IMAGE

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
# cache:
#   paths:
# before_script is used to define the command that should be run before all jobs, including deploy jobs, but after the restoration of artifacts.
# This can be an array or a multi-line string.
before_script:
  - python3 -m pip install -r docker-requirements.txt


stages:
  - lint
  - build
  - test
  - deploy
  - publish
  - scan
  - pages


# Standardised included jobs
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  MINIKUBE: "false"

# Include CI templates
include:
# Python packages build,lint, test, scan and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python.gitlab-ci.yml'

# Jupyter notebook linting and testing
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/notebook.gitlab-ci.yml'

# Helm Charts
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

# Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs-pages.gitlab-ci.yml'

# .post step finalisers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

# k8s steps
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/k8s.gitlab-ci.yml'

# changelog release page
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/changelog.gitlab-ci.yml'

# deploy steps
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/deploy.gitlab-ci.yml'

python-test:
  before_script:
    - '[ -f .make/python.mk ] || (echo "File python.mk not included in Makefile; exit 1")'
    - 'make help | grep python-test'
    - poetry config virtualenvs.in-project true
    - echo "python-build Setting.. poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE"
    - poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE
    - |
      if [[ ! -z "$PYTANGO_VERSION"  ]]; then \
        echo "Received pytango version: $PYTANGO_VERSION" ; \
        poetry add pytango==$PYTANGO_VERSION
      fi
      if [[ -f pyproject.toml ]]; then
        echo "python-test: Installing with poetry";
        time poetry install;
      else
        if  [[ -f requirements.txt ]]; then
          echo "python-test: Installing with pip";
          time pip3 install -r requirements.txt;
        fi;
      fi;

k8s-test-no-operator:
  extends: k8s-test
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-no-op'
    SKA_TANGO_OPERATOR: 'false'
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - "build/"
    reports:
      junit: build/report.xml
    when: always
  environment:
    name: test/$CI_COMMIT_REF_SLUG-no-op
    on_stop: stop-k8s-test-no-operator
    auto_stop_in: 1 minute
  rules:
    - exists:
        - tests/**/*

stop-k8s-test-no-operator:
  extends: stop-k8s-test
  when: manual
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-no-op'
  environment:
    name: test/$CI_COMMIT_REF_SLUG-no-op
    action: stop


